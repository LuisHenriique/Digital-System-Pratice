--VERSAO FUNCIONAL--

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity part4 is
    Port (
        clk        : in  STD_LOGIC;
        reset      : in  STD_LOGIC;
        
        key1       : in  STD_LOGIC; -- Botão para presetar os minutos
        key0       : in  STD_LOGIC; -- Botão para pausar e continuar o relógio
        
	-- switches para as 8 primeiras letras do alfabeto
	-- 000 para A, 001 para B ... 111 para H
        sw2 : in STD_LOGIC; 
        sw1 : in STD_LOGIC;
        sw0 : in STD_LOGIC; 
        
        hex0       : out STD_LOGIC_VECTOR (6 downto 0)  -- Mostra a letra especificada pelos switchs
    );
end part4;

architecture Behavioral of part4 is
    -- VARIAVEIS AUXILIARES --
    signal sw : std_logic_vector(2 downto 0); -- VETOR DOS SWITCHES
        
    signal run : STD_LOGIC := '0';  -- Indica se o relógio está rodando ou pausado
    signal clk_counter : integer := 0; -- Contador de ciclos de clock
    constant CYCLES_PER_CENTISECOND : integer := 500000; -- 500.000 ciclos de clock 

    -- FUNÇÃO AUXILIAR DO DISPLAY --
    function bin_to_7seg (digit : STD_LOGIC_VECTOR(2 downto 0)) return STD_LOGIC_VECTOR is
	begin
    	case digit is
        	when "000" => return "0001000";  -- A
        	when "001" => return "0000011";  -- B
        	when "010" => return "1000110";  -- C
        	when "011" => return "0100001";  -- D
        	when "100" => return "0000110";  -- E
        	when "101" => return "0001110";  -- F
        	when "110" => return "0000010";  -- G
        	when "111" => return "0011001";  -- H
        	when others => return "1111111";  -- Display apagado
    	end case;
	end function;
begin
	 sw <= sw2 &sw1 &sw0;
    process(clk, reset)
    begin
        if reset = '1' then
            minutos <= 0;
            segundos <= 0;
            centesimos <= 0;
            clk_counter <= 0;
            run <= '0';
        elsif rising_edge(clk) then
            if key1='0' then
                if to_integer(unsigned(sw)) <= 59 then
                    minutos <= to_integer(unsigned(sw));
                end if;
            end if;

            if key0 = '0' then
                run <= '0';  -- Pausa o relógio
            else
                run <= '1';  -- Continua o relógio
            end if;

            if run = '1' then
                -- Incrementa o contador de ciclos de clock
                if clk_counter = CYCLES_PER_CENTISECOND - 1 then
                    clk_counter <= 0;  -- Reseta o contador de ciclos de clock
                    if centesimos = 99 then
                        centesimos <= 0;
                        if segundos = 59 then
                            segundos <= 0;
                            if minutos = 59 then
                                minutos <= 0;
                            else
                                minutos <= minutos + 1;
                            end if;
                        else
                            segundos <= segundos + 1;
                        end if;
                    else
                        centesimos <= centesimos + 1;
                    end if;
                else
                    clk_counter <= clk_counter + 1;
                end if;
            end if;
        end if;
    end process;

    -- LOGICA PARA CONVERTER OS SWITCHES EM LETRA NO DISPLAY --
    process(sw)
    begin
        hex0 <= bin_to_7seg(sw);
    end process;

end Behavioral;
