LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY part4 IS
    PORT (
        CLOCK_50   : IN  STD_LOGIC;                -- Clock de 50 MHz
        KEY0       : IN  STD_LOGIC;                -- Reset
        SW         : IN  STD_LOGIC_VECTOR(8 DOWNTO 0); -- Switches para endereço e dados
        HEX0       : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); -- Display de 7 segmentos para dados
        HEX1       : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); -- Display de 7 segmentos para dados de escrita
        HEX2       : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); -- Display de 7 segmentos para endereço
        HEX3       : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); -- Display de 7 segmentos para endereço
        HEX4       : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); -- Display de 7 segmentos para endereço de escrita
        HEX5       : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)  -- Display de 7 segmentos para endereço de escrita
    );
END part4;

ARCHITECTURE behavior OF part4 IS

    SIGNAL wraddress   : STD_LOGIC_VECTOR(4 DOWNTO 0);
    SIGNAL rdaddress   : STD_LOGIC_VECTOR(4 DOWNTO 0);
    SIGNAL wren        : STD_LOGIC := '0';
    SIGNAL data        : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL q           : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL counter     : INTEGER := 0;             -- Contador para o endereço de leitura
    SIGNAL clk_div     : INTEGER := 0;             -- Divisor de clock
    SIGNAL display_data : INTEGER;                 -- Dados a serem exibidos

    COMPONENT ram32x4
        PORT (
            clock       : IN  STD_LOGIC;
            data        : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
            rdaddress    : IN  STD_LOGIC_VECTOR(4 DOWNTO 0);
            wraddress    : IN  STD_LOGIC_VECTOR(4 DOWNTO 0);
            wren        : IN  STD_LOGIC;
            q           : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
        );
    END COMPONENT;

BEGIN

    -- Instância da memória RAM
    RAM_INST : ram32x4
        PORT MAP (
            clock => CLOCK_50,
            data => data,
            rdaddress => rdaddress,
            wraddress => wraddress,
            wren => wren,
            q => q
        );

    -- Lógica para controle do contador e escrita
    PROCESS(CLOCK_50)
    BEGIN
        IF rising_edge(CLOCK_50) THEN
            IF KEY0 = '0' THEN  -- Reset
                counter <= 0;
                rdaddress <= (others => '0');
                wren <= '0';
            ELSE
                clk_div <= clk_div + 1;
                IF clk_div = 50000000 THEN  -- Aproximadamente 1 segundo
                    clk_div <= 0;
                    counter <= (counter + 1) MOD 32;  -- Looping através dos endereços
                END IF;

                rdaddress <= std_logic_vector(to_unsigned(counter, 5));
                display_data <= to_integer(unsigned(q));
                wren <= SW(8);  -- Ativa escrita se SW8 estiver ligado
                wraddress <= SW(7 DOWNTO 4);
                data <= SW(3 DOWNTO 0);
            END IF;
        END IF;
    END PROCESS;

    -- Conversão para 7 segmentos
    HEX0 <= conv_std_logic_vector(display_data, 7); -- Dados
    HEX1 <= conv_std_logic_vector(to_integer(unsigned(data)), 7); -- Dados de escrita
    HEX2 <= conv_std_logic_vector(to_unsigned(counter, 7), 7); -- Endereço
    HEX3 <= conv_std_logic_vector(to_unsigned(counter, 7), 7); -- Endereço
    HEX4 <= conv_std_logic_vector(to_unsigned(to_integer(unsigned(wraddress)), 7), 7); -- Endereço de escrita
    HEX5 <= conv_std_logic_vector(to_unsigned(to_integer(unsigned(wraddress)), 7), 7); -- Endereço de escrita

END behavior;
