LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;  -- For arithmetic operations on std_logic_vector

ENTITY ram_controller IS
	PORT (
		-- Input signals
		SW		: IN STD_LOGIC_VECTOR (8 DOWNTO 0);  -- SW0-SW3 for data, SW4-SW8 for address, SW9 for write signal
		KEY0	: IN STD_LOGIC;                       -- Clock input
		-- Output signals
		HEX0	: OUT STD_LOGIC_VECTOR (6 DOWNTO 0);  -- 7-segment display for output data
		HEX2	: OUT STD_LOGIC_VECTOR (6 DOWNTO 0);  -- 7-segment display for input data
		HEX4	: OUT STD_LOGIC_VECTOR (6 DOWNTO 0);  -- 7-segment display for address
		HEX5	: OUT STD_LOGIC_VECTOR (6 DOWNTO 0)   -- 7-segment display for address
	);
END ram_controller;

ARCHITECTURE behavior OF ram_controller IS

	-- Internal signals
	SIGNAL address	: STD_LOGIC_VECTOR (4 DOWNTO 0);
	SIGNAL data		: STD_LOGIC_VECTOR (3 DOWNTO 0);
	SIGNAL wren		: STD_LOGIC;
	SIGNAL q			: STD_LOGIC_VECTOR (3 DOWNTO 0);

	-- Instantiate the RAM module
	COMPONENT ram32x4
		PORT (
			address		: IN STD_LOGIC_VECTOR (4 DOWNTO 0);
			clock		: IN STD_LOGIC;
			data		: IN STD_LOGIC_VECTOR (3 DOWNTO 0);
			wren		: IN STD_LOGIC;
			q			: OUT STD_LOGIC_VECTOR (3 DOWNTO 0)
		);
	END COMPONENT;

BEGIN

	-- Connect inputs and outputs
	address <= SW(8 DOWNTO 4);  -- Address input from switches SW8-SW4
	data <= SW(3 DOWNTO 0);      -- Data input from switches SW3-SW0
	wren <= SW(9);                -- Write enable from switch SW9

	-- Instantiate RAM
	ram_instance : ram32x4
		PORT MAP (
			address => address,
			clock => KEY0,
			data => data,
			wren => wren,
			q => q
		);

	-- Display output data on HEX0
	HEX0 <= convert_to_7seg(q);
	-- Display input data on HEX2
	HEX2 <= convert_to_7seg(data);
	-- Display address on HEX4 and HEX5
	HEX4 <= convert_to_7seg(address(4 DOWNTO 0)); -- Display lower part of address
	HEX5 <= convert_to_7seg(address(4 DOWNTO 0)); -- Can display address in different format

END behavior;

-- Function to convert std_logic_vector to 7-segment display encoding
FUNCTION convert_to_7seg(input_value : STD_LOGIC_VECTOR (3 DOWNTO 0)) RETURN STD_LOGIC_VECTOR IS
BEGIN
	-- Convert binary to 7-segment display encoding
	CASE input_value IS
		WHEN "0000" => RETURN "1000000"; -- 0
		WHEN "0001" => RETURN "1111001"; -- 1
		WHEN "0010" => RETURN "0100100"; -- 2
		WHEN "0011" => RETURN "0110000"; -- 3
		WHEN "0100" => RETURN "0011001"; -- 4
		WHEN "0101" => RETURN "0010010"; -- 5
		WHEN "0110" => RETURN "0000010"; -- 6
		WHEN "0111" => RETURN "1111000"; -- 7
		WHEN "1000" => RETURN "0000000"; -- 8
		WHEN "1001" => RETURN "0010000"; -- 9
		WHEN OTHERS => RETURN "1111111"; -- Blank or error
	END CASE;
END FUNCTION;
